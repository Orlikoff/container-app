// select users with name that starts with <character> and email from <post_server>
SELECT * FROM user_data WHERE user_name SIMILAR TO '[<character>]%' AND user_email SIMILAR TO '%@<post_server>'

// select containers with code that starts with <code_part> and filling type of <fill_type>
WITH container_specified AS (
	SELECT * FROM container
	WHERE container_code SIMILAR TO '<code_part>%'
)
SELECT * FROM shipment WHERE id IN (SELECT id FROM container_specified) AND filling_type='<fill_type>'

// join containers with their shipments
SELECT * from shipment ship LEFT OUTER JOIN container cont ON (ship.container_id=cont.id)
ORDER BY ship.container_id DESC

// get mass of all shipments in container
WITH tab AS (
	SELECT * from shipment ship LEFT OUTER JOIN container cont ON (ship.container_id=cont.id)
	ORDER BY ship.container_id DESC
)
SELECT container_id, sum(mass) FROM tab GROUP BY container_id

// select containers in which there is at least one package that has mass greater than <mass>
SELECT id
FROM container cont
WHERE EXISTS(
	SELECT 1
	FROM shipment ship
	WHERE ship.container_id=cont.id
	AND ship.mass > <mass>
)
ORDER BY id

// Creating trigger for log_action
CREATE OR REPLACE FUNCTION log_action_insert_trigger_fnc()
  RETURNS trigger AS
$$
BEGIN

UPDATE journal
SET last_update_datetime = NEW.datetime
WHERE id = NEW.journal_id;

RETURN NEW;
END;
$$
LANGUAGE 'plpgsql';

CREATE TRIGGER log_action_insert
AFTER INSERT
ON log_action
FOR EACH ROW
EXECUTE PROCEDURE log_action_insert_trigger_fnc();

ALTER TABLE log_action
ENABLE TRIGGER ALL;

// move shipment to container <shipment_id> to <new_container_id>
CREATE OR REPLACE PROCEDURE moveShipment(shipment_id INT, new_container_id INT)
LANGUAGE 'plpgsql'
AS
$$
BEGIN

UPDATE shipment
SET container_id = new_container_id
WHERE id = shipment_id;

END;
$$;

// change user with id <user_id> password to <new_password>
CREATE OR REPLACE PROCEDURE changePassword(user_id INT, new_password CHARACTER VARYING(30))
LANGUAGE 'plpgsql'
AS
$$
BEGIN

UPDATE user_data
SET user_password = new_password
WHERE id = user_id;

// log new worker's action
CREATE OR REPLACE PROCEDURE logNewAction(worker_id INT, action_desc CHARACTER VARYING(100))
LANGUAGE 'plpgsql'
AS
$$
DECLARE

worker_journal_id INT;

BEGIN

SELECT (id) FROM journal
WHERE marine_worker_id = worker_id
INTO worker_journal_id;


INSERT INTO log_action(journal_id, edited_id, action_description, datetime)
VALUES (worker_journal_id, worker_id, action_desc, NOW());

END;
$$;

